<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="/css/output.css" rel="stylesheet">
    <%- include('../../partials/tinymce') %>
</head>
<body class="bg-gray-50">
    <main class="max-w-6xl mx-auto px-4 py-8">
        <!-- Header with navigation -->
        <div class="flex justify-between items-center mb-8 bg-white p-4 rounded-lg shadow">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Edit Comic Book</h1>
                <p class="text-sm text-gray-500 mt-1">Edit details and manage pages</p>
            </div>
            <a href="/admin/comics" 
               class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"/>
                </svg>
                Back to Comics
            </a>
        </div>

        <form id="comicForm" action="/admin/comics/<%= comic._id %>?_method=PUT" method="POST" enctype="multipart/form-data">
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                <!-- Left Column: Basic Info -->
                <div class="lg:col-span-1 space-y-6">
                    <div class="bg-white shadow rounded-lg p-6">
                        <h2 class="text-lg font-medium text-gray-900 mb-4">Basic Information</h2>
                        
                        <div class="space-y-4">
                            <div>
                                <label for="title" class="block text-sm font-medium text-gray-700">Title</label>
                                <input type="text" 
                                       id="title" 
                                       name="title" 
                                       required
                                       value="<%= comic.title %>"
                                       class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                            </div>

                            <div>
                                <label for="content" class="block text-sm font-medium text-gray-700">Description</label>
                                <textarea id="content" 
                                          name="description" 
                                          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"><%- comic.description %></textarea>
                            </div>

                            <div class="flex items-center">
                                <input type="checkbox" 
                                       id="isPublished" 
                                       name="isPublished"
                                       <%= comic.isPublished ? 'checked' : '' %>
                                       class="h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500">
                                <label for="isPublished" class="ml-2 block text-sm text-gray-900">
                                    Published
                                </label>
                            </div>
                        </div>
                    </div>

                    <!-- Cover Image Section -->
                    <div class="bg-white shadow rounded-lg p-6">
                        <h2 class="text-lg font-medium text-gray-900 mb-4">Cover Image</h2>
                        <div class="space-y-4">
                            <div class="flex justify-center">
                                <img src="<%= comic.coverImage %>" 
                                     alt="Current cover" 
                                     class="rounded-lg max-h-64 object-contain">
                            </div>
                            <div class="mt-4">
                                <label for="coverImage" 
                                       class="flex justify-center px-6 py-4 border-2 border-gray-300 border-dashed rounded-md cursor-pointer hover:border-blue-400 transition-colors">
                                    <div class="space-y-1 text-center">
                                        <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
                                            <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                                        </svg>
                                        <div class="text-sm text-gray-600">
                                            <span class="font-medium text-blue-600 hover:text-blue-500">Upload new cover</span>
                                        </div>
                                        <p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
                                    </div>
                                    <input id="coverImage" name="coverImage" type="file" class="sr-only" accept="image/*">
                                </label>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Right Column: Gallery Management -->
                <div class="lg:col-span-2">
                    <div class="bg-white shadow rounded-lg p-6">
                        <div class="flex justify-between items-center mb-4">
                            <h2 class="text-lg font-medium text-gray-900">Gallery Images</h2>
                            <label for="gallery" 
                                   class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 cursor-pointer">
                                <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
                                </svg>
                                Add Pages
                                <input id="gallery" 
                                       name="gallery" 
                                       type="file" 
                                       class="sr-only" 
                                       accept="image/*" 
                                       multiple>
                            </label>
                        </div>

                        <p class="text-sm text-gray-500 mb-4">Drag and drop to reorder pages. Click the red button to remove a page.</p>

                        <!-- Gallery Grid -->
                        <div id="galleryContainer" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-4">
                            <% comic.gallery.forEach((image, index) => { %>
                                <div class="relative group cursor-move" 
                                     draggable="true" 
                                     data-index="<%= index %>"
                                     data-image="<%= image %>">
                                    <div class="aspect-[3/4] rounded-lg overflow-hidden">
                                        <img src="<%= image %>" 
                                             alt="Gallery image <%= index + 1 %>" 
                                             class="w-full h-full object-cover">
                                    </div>
                                    <!-- Page number indicator -->
                                    <div class="absolute top-2 left-2 px-2 py-1 bg-black bg-opacity-50 text-white text-xs rounded-full">
                                        Page <%= index + 1 %>
                                    </div>
                                    <button type="button" 
                                            class="absolute top-2 right-2 p-1.5 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity hover:bg-red-600"
                                            onclick="removeGalleryImage(this, <%= index %>)">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                                        </svg>
                                    </button>
                                    <!-- Drag handle -->
                                    <div class="absolute bottom-2 left-2 p-1.5 bg-black bg-opacity-50 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9h8M8 15h8"/>
                                        </svg>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>

                    <!-- Action Buttons -->
                    <div class="mt-6 flex justify-end space-x-4">
                        <input type="hidden" name="galleryOrder" id="galleryOrder" value="">
                        <input type="hidden" name="removedImages" id="removedImages" value="">
                        
                        <a href="/admin/comics" 
                           class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                            Cancel
                        </a>
                        <button type="submit" 
                                class="px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </form>
    </main>

    <script>
    let removedImages = [];

    document.getElementById('comicForm').addEventListener('submit', function(e) {
        // Get all gallery items in their current order
        const galleryItems = Array.from(galleryContainer.querySelectorAll('.relative'));
        
        // Create array of existing image paths in their new order
        const galleryOrder = galleryItems
            .filter(item => item.dataset.image) // Only get existing images that have data-image attribute
            .map(item => item.dataset.image);
        
        // Update hidden input with new order
        document.getElementById('galleryOrder').value = JSON.stringify(galleryOrder);
        
        // Get TinyMCE content before form submission
        const description = tinymce.get('content').getContent();
        if (!description) {
            e.preventDefault();
            alert('Please enter a description');
            return;
        }
        
        // Add removed images to hidden input
        document.getElementById('removedImages').value = JSON.stringify(removedImages);
    });

    // Preview uploaded cover image
    document.getElementById('coverImage').addEventListener('change', function(e) {
        if (e.target.files && e.target.files[0]) {
            const reader = new FileReader();
            reader.onload = function(e) {
                const preview = document.createElement('img');
                preview.src = e.target.result;
                preview.className = 'rounded-lg';
                const container = this.closest('div').querySelector('img');
                if (container) {
                    container.src = e.target.result;
                }
            }.bind(this);
            reader.readAsDataURL(e.target.files[0]);
        }
    });

    function removeGalleryImage(button, index) {
        const imageElement = button.parentElement.querySelector('img');
        const imageUrl = imageElement.src;
        // Get the relative path from the full URL
        const urlParts = imageUrl.split('/uploads/');
        if (urlParts.length > 1) {
            removedImages.push('/uploads/' + urlParts[1]);
        }
        button.parentElement.remove();
    }

    // Drag and drop functionality
    const galleryContainer = document.getElementById('galleryContainer');
    let draggedItem = null;

    function handleDragStart(e) {
        draggedItem = this;
        this.classList.add('opacity-50');
        e.dataTransfer.effectAllowed = 'move';
    }

    function handleDragEnd(e) {
        this.classList.remove('opacity-50');
        galleryContainer.querySelectorAll('.relative').forEach(item => {
            item.classList.remove('border-2', 'border-blue-500', 'border-dashed');
        });
    }

    function handleDragOver(e) {
        e.preventDefault();
        return false;
    }

    function handleDragEnter(e) {
        this.classList.add('border-2', 'border-blue-500', 'border-dashed');
    }

    function handleDragLeave(e) {
        this.classList.remove('border-2', 'border-blue-500', 'border-dashed');
    }

    function handleDrop(e) {
        e.stopPropagation();
        
        if (draggedItem !== this) {
            const allItems = [...galleryContainer.querySelectorAll('.relative')];
            const draggedIndex = allItems.indexOf(draggedItem);
            const droppedIndex = allItems.indexOf(this);

            if (draggedIndex < droppedIndex) {
                this.parentNode.insertBefore(draggedItem, this.nextSibling);
            } else {
                this.parentNode.insertBefore(draggedItem, this);
            }
        }

        return false;
    }

    // Initialize drag and drop
    galleryContainer.querySelectorAll('.relative').forEach(item => {
        item.addEventListener('dragstart', handleDragStart);
        item.addEventListener('dragend', handleDragEnd);
        item.addEventListener('dragover', handleDragOver);
        item.addEventListener('dragenter', handleDragEnter);
        item.addEventListener('dragleave', handleDragLeave);
        item.addEventListener('drop', handleDrop);
    });

    // Preview gallery images before upload
    document.getElementById('gallery').addEventListener('change', function(e) {
        const files = Array.from(e.target.files);
        
        files.forEach(file => {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                // Create preview container
                const previewDiv = document.createElement('div');
                previewDiv.className = 'relative group cursor-move';
                previewDiv.draggable = true;
                
                // Create preview image
                const preview = document.createElement('img');
                preview.src = e.target.result;
                preview.className = 'rounded-lg w-full h-32 object-cover';
                preview.alt = 'New gallery image';
                
                // Create remove button
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.className = 'absolute top-1 right-1 p-1 bg-red-500 text-white rounded-full opacity-0 group-hover:opacity-100 transition-opacity';
                removeButton.innerHTML = `
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                `;
                removeButton.onclick = function() {
                    previewDiv.remove();
                };

                // Create drag handle
                const dragHandle = document.createElement('div');
                dragHandle.className = 'absolute bottom-1 left-1 p-1 bg-black bg-opacity-50 text-white rounded opacity-0 group-hover:opacity-100 transition-opacity';
                dragHandle.innerHTML = `
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 9h8M8 15h8"/>
                    </svg>
                `;

                // Add "New" indicator
                const newBadge = document.createElement('div');
                newBadge.className = 'absolute top-1 left-1 px-2 py-1 bg-green-500 text-white text-xs rounded-full';
                newBadge.textContent = 'New';

                // Assemble preview
                previewDiv.appendChild(preview);
                previewDiv.appendChild(removeButton);
                previewDiv.appendChild(dragHandle);
                previewDiv.appendChild(newBadge);

                // Add to gallery container
                document.getElementById('galleryContainer').appendChild(previewDiv);

                // Add drag and drop event listeners
                previewDiv.addEventListener('dragstart', handleDragStart);
                previewDiv.addEventListener('dragend', handleDragEnd);
                previewDiv.addEventListener('dragover', handleDragOver);
                previewDiv.addEventListener('dragenter', handleDragEnter);
                previewDiv.addEventListener('dragleave', handleDragLeave);
                previewDiv.addEventListener('drop', handleDrop);
            };
            
            reader.readAsDataURL(file);
        });
    });
    </script> 
</body>
</html> 