<!-- Include TinyMCE -->
<script src="/tinymce/tinymce.min.js"></script>

<!-- Initialize TinyMCE -->
<script>
    // Track upload errors
    let hasUploadError = false;
    let lastUploadError = '';

    // Wait for the DOM to be ready
    document.addEventListener('DOMContentLoaded', function() {
        tinymce.init({
            selector: '#content',
            license_key: 'gpl',
            plugins: [
                'advlist', 'autolink', 'lists', 'link', 'image', 'charmap', 'preview',
                'anchor', 'searchreplace', 'visualblocks', 'code', 'fullscreen',
                'insertdatetime', 'media', 'table', 'help', 'wordcount'
            ],
            toolbar: 'undo redo | blocks | ' +
                'bold italic backcolor | alignleft aligncenter ' +
                'alignright alignjustify | bullist numlist outdent indent | ' +
                'removeformat | image | help',
            images_upload_handler: (blobInfo) => {
                hasUploadError = false;
                lastUploadError = '';
                
                return new Promise((resolve, reject) => {
                    const formData = new FormData();
                    formData.append('file', blobInfo.blob(), blobInfo.filename());

                    fetch('/admin/upload-image', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => {
                        if (!response.ok) {
                            return response.json().then(data => {
                                throw new Error(data.error || 'Upload failed');
                            });
                        }
                        return response.json();
                    })
                    .then(result => {
                        if (result.location) {
                            const imageUrlsInput = document.getElementById('imageUrls');
                            if (imageUrlsInput) {
                                const currentUrls = imageUrlsInput.value ? imageUrlsInput.value.split(',') : [];
                                currentUrls.push(result.location);
                                imageUrlsInput.value = currentUrls.join(',');
                            }
                            resolve(result.location);
                        } else {
                            hasUploadError = true;
                            lastUploadError = 'Upload failed: No location returned';
                            reject(lastUploadError);
                        }
                    })
                    .catch(error => {
                        console.error('Upload error:', error);
                        hasUploadError = true;
                        lastUploadError = error.message || 'Upload failed';
                        reject(lastUploadError);
                    });
                });
            },
            automatic_uploads: true,
            relative_urls: false,
            remove_script_host: false,
            convert_urls: true,
            height: 500,
            menubar: false,
            setup: function(editor) {
                // Add form validation
                const form = document.querySelector('form');
                if (form) {
                    form.addEventListener('submit', function(e) {
                        if (hasUploadError) {
                            e.preventDefault();
                            alert('Please fix the image upload errors before submitting: ' + lastUploadError);
                            return false;
                        }
                    });
                }
            }
        });
    });
</script> 